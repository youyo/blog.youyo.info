<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | blog.youyo.info]]></title>
  <link href="http://blog.youyo.info/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.youyo.info/"/>
  <updated>2015-07-06T13:15:44+09:00</updated>
  <id>http://blog.youyo.info/</id>
  <author>
    <name><![CDATA[youyo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[リモートのdockerホストに接続する]]></title>
    <link href="http://blog.youyo.info/blog/2015/07/06/docker-connect-tls/"/>
    <updated>2015-07-06T13:09:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2015/07/06/docker-connect-tls</id>
    <content type="html"><![CDATA[<p><a href="https://beatsync.net/main/log20141212.html">インターネットの向こう側にあるDockerを使う</a> を大いに参考にした。(丸パクリ</p>

<h2>環境</h2>

<ul>
<li>centos7</li>
<li>dockerをyumでインストール</li>
</ul>


<h2>Server側</h2>

<p>```
cd /etc/docker/certs.d/
openssl genrsa -des3 -out ca-key.pem 4096
openssl req -new -x509 -days 3650 -key ca-key.pem -out ca.pem</p>

<p>openssl genrsa -des3 -out server-key.pem 4096
openssl req -subj '/CN=server' -new -key server-key.pem -out server.csr
openssl x509 -req -days 3650 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem</p>

<p>openssl genrsa -des3 -out key.pem 4096
openssl req -subj '/CN=client' -new -key key.pem -out client.csr
echo extendedKeyUsage = clientAuth > extfile.cnf
openssl x509 -req -days 3650 -in client.csr -CA ca.pem -CAkey ca-key.pem -out cert.pem -extfile extfile.cnf</p>

<p>openssl rsa -in server-key.pem -out server-key.pem
openssl rsa -in key.pem -out key.pem</p>

<h2>vim /etc/sysconfig/docker</h2>

<h1>OPTIONS='--selinux-enabled'</h1>

<h2>OPTIONS='--selinux-enabled --tlsverify --tlscacert=/etc/docker/certs.d/ca.pem --tlscert=/etc/docker/certs.d/server-cert.pem --tlskey=/etc/docker/certs.d/server-key.pem -H=0.0.0.0:2376 -H unix:///var/run/docker.sock'</h2>

<p>systemctl start docker.service
systemctl enable docker
```</p>

<h2>client側</h2>

<p>```
vim ~/.docker/ca.pem
vim ~/.docker/cert.pem
vim ~/.docker/key.pem</p>

<p>vim ~/.zshrc
export DOCKER_HOST=tcp://xxx.xxx.xxx.xxx:2376
export DOCKER_TLS_VERIFY=1
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JTF2014行ってきた]]></title>
    <link href="http://blog.youyo.info/blog/2014/06/22/jtf2014/"/>
    <updated>2014-06-22T16:37:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2014/06/22/jtf2014</id>
    <content type="html"><![CDATA[<p>JTF2014行ってきました。<br/>
朝起きれなかったので途中からの参加で、かつ夜仕事があったので途中で帰ったわけですが、とても貴重なお話が聞けました！<br/>
箇条書きですが自分がメモったことをざっと書きます。</p>

<!-- more -->


<h2>インフラエンジニアのための次世代プロトコル入門</h2>

<p>※ 途中から参加</p>

<p><a class="embedly-card" href="https://speakerdeck.com/nunnun/inhuraenziniafalsetamefalseci-shi-dai-purotokoruru-men-july-techfesta-2014">インフラエンジニアのための次世代プロトコル入門 - July TechFesta 2014</a></p>

<script>!function(a){var b="embedly-platform",c="script";if(!a.getElementById(b)){var d=a.createElement(c);d.id=b,d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}}(document);</script>


<h3>HTTP/2.0</h3>

<ul>
<li>サーバからpushできる</li>
<li>1つのtcp接続で複数の情報をやりとりできる</li>
</ul>


<h3>QUIC</h3>

<ul>
<li>quick udp internet connections</li>
<li>udp上に多重化して通信</li>
<li>googleが現状のinternetで動くプロトコル実装</li>
<li>TCP/TLSは3RTTセッション確立、再接続は1RTT</li>
<li>1RTTでセッション確立、再接続は0RTT(ダイレクトにでデータ送信)</li>
<li>QUICはやい</li>
<li>packet pacing (流量調整)</li>
<li>multi path</li>
<li>wifi接続から3G接続のように回線が変わっても、セッションid送ることで0RTTで再接続可能</li>
</ul>


<h3>TLS</h3>

<ul>
<li>v1.3策定中</li>
<li>ハンドシェイク簡略化を目指す</li>
<li>0.5RTTでも早く</li>
</ul>


<h3>ipv6</h3>

<ul>
<li>AzureのUSリージョンでipv4アドレス枯渇発生</li>
<li>ipv4-ipv6移行共存技術</li>
<li>新サービスはipv6対応で作ると今度楽できるかも</li>
<li>cloudフレアはipv6対応済み。CDN使うのもあり</li>
</ul>


<h3>ハイパフォーマンスブラウザネットワーキング(本)</h3>

<ul>
<li>素晴らしい</li>
</ul>


<h3>まとめ</h3>

<ul>
<li>いずれ対応するなら事前に準備したほうがいい</li>
<li>HTTP/2.0はデプロイ間近</li>
</ul>


<h2>Dockerのエンタープライズ開発での活用モデル</h2>

<p>資料見つけたらはる。</p>

<h3>dockerとは</h3>

<ul>
<li>google trend 急上昇</li>
<li>軽い。使いやすい</li>
<li>起動が速い。仮想ハードウェア作詞して起動ではなく、ハードウェア、カーネルは共有してるから速い</li>
<li>異なるディストリでもカーネルは共有</li>
<li>物理と同じ速度が出る。virtualboxなどの仮想化は遅い</li>
<li>インストール簡単</li>
<li>Dockerfileで楽々イメージ作成</li>
<li>コマンド一つで起動</li>
<li>後片付けも簡単</li>
<li>Docker registry</li>
<li>どこでも使える。ポータビリティ高い</li>
</ul>


<h3>仕組み</h3>

<h4>AUFS</h4>

<ul>
<li>何層にも重ねられるFS</li>
<li>readonly-FSの上にwritable-FSを重ねて使用</li>
<li>変更のないファイルはベースで共有する</li>
</ul>


<h4>コンテナ仮想化</h4>

<ul>
<li>namespace</li>
<li>cgroups</li>
<li>PID namespace コンテナ側からは他のPIDに見えない干渉できないが、ホストからはコンテナのPIDは別プロセスIDとして見える</li>
<li>Net namespace hostからはvethという仮想NICとして見える</li>
<li>cgroup</li>
<li>プロセスのリソース制御</li>
</ul>


<h3>事例</h3>

<h4>CIに利用</h4>

<ul>
<li>docker + jenkins + gitlab でCI</li>
<li>jenkinsに様々な環境が必要になる</li>
<li>virtualbox等で分けたのでは重い</li>
<li>dockerで準備すれば軽くできる</li>
</ul>


<h4>評価環境</h4>

<ul>
<li>tomcatがまとめて落ちるの困る</li>
<li>とりあえずdockerで分けた</li>
<li>開発者の確認終わるまでコンテナ残す必要がある</li>
<li>削除フラグのjob作成していらなくなってから削除</li>
</ul>


<h4>開発環境</h4>

<ul>
<li>複数バージョンの保守が必要</li>
<li>必要なものを全て入れたイメージ作成して利用</li>
<li>docker registry利用</li>
<li>オーバーヘッド少ないのでいい</li>
<li>環境消すのも楽</li>
</ul>


<h4>複数拠点でのDB利用</h4>

<ul>
<li>海外の複数拠点での同じDB利用</li>
<li>東京-上海間でレジストリーサーバの同期</li>
<li>東京でpush、上海でpull</li>
<li>状況にあったインフラ上で同一環境を作れた</li>
</ul>


<h2>クラウドストレージを自前で構築できる「OpenStack Swift」をPuppetで数百台自動構築して見えた課題と現状のベストプラクティス</h2>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/36156032" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/MotokiKakinuma/july-techfesta2014-f30" title="July techfesta2014 f30" target="_blank">July techfesta2014 f30</a> </strong> from <strong><a href="http://www.slideshare.net/MotokiKakinuma" target="_blank">Motoki Kakinuma</a></strong> </div>

</p>

<h3>openstack swiftとは</h3>

<ul>
<li>世界中でエンプラ用途進む</li>
<li>proxyとstorage</li>
<li>故障に備えて複数のレプリカに書き込む(3カ所 or 2カ所書き込みでOK、1カ所だけだとNG返す)</li>
<li>ディスク故障時には自動復旧</li>
<li>proxyを増やせばスループット上昇</li>
<li>storage増やせば容量増える
データ3倍保存なので帯域、容量全て食う</li>
</ul>


<h4>利用目的</h4>

<ul>
<li>スケールアウトしたい</li>
<li>長期保存したい(非ベンダー依存)</li>
<li>高速、性能重視</li>
</ul>


<p>　</p>

<ul>
<li>readのほうが速い</li>
<li>1ファイルへのアクセス集中に強い</li>
<li>バックアップ</li>
</ul>


<h3>swift数百台自動構築</h3>

<ul>
<li>数百台(6セット)</li>
<li>監視サーバ等も必要</li>
<li>高水準、少人数</li>
</ul>


<h4>つかったもの</h4>

<ul>
<li>kickstart</li>
<li>puppet (理由なし)</li>
<li>subversion</li>
<li>pssh</li>
<li>ipmi</li>
</ul>


<p>　</p>

<ul>
<li>puppet 自動化、誰でも出来るようにわかりやすく書いた</li>
<li>数百台になったとき、puppetマスターが耐えられない可能性</li>
<li>ローカルデプロイ方式でやった</li>
</ul>


<h4>デプロイ手順</h4>

<ol>
<li>ipmiで電源on</li>
<li>kickstart pxeboot</li>
<li>psshでマニュフェスト配布</li>
<li>puppetで一斉に実行</li>
</ol>


<p>　</p>

<ul>
<li>自動試験</li>
<li>tempest(openstackの自動試験ツール)を拡張</li>
<li>+お手製ツールでテスト(serverspecは評価段階だったのでやめ)</li>
<li>tempestでできないこと</li>
<li>tempestはapi試験なのでバックグラウンド処理の試験は出来ない</li>
</ul>


<h4>遭遇したトラブル</h4>

<ul>
<li>検証環境のファイルを本番にデプロイ</li>
<li>別の理由で止めておいたプロセスがpuppetで起動しちゃった</li>
<li>ファイルでデプロイ出来たが、設定が反映されなかった</li>
<li>本番環境へのプロビジョニング運用はもうやめたい！</li>
</ul>


<h3>インフラプロビジョニングベストプラクティス</h3>

<ul>
<li>イミュータブル</li>
<li>blue-green deployment</li>
<li>packer ビルドツール</li>
<li>複数クラウド仮想環境に対応</li>
<li>開発環境と本番環境の差異を吸収できる</li>
<li>クラウド環境の移行も楽</li>
<li>dockerもいい</li>
<li>基本はpackerを使う(dockerfileは使わない)</li>
<li>dockerはあくまでプラットフォーム</li>
<li>dockerはまだ課題あり</li>
<li>DB、ログはどうする？</li>
</ul>


<h4>まとめ</h4>

<ul>
<li>自動構築は出来たけど、運用でトラブった。</li>
<li>本番環境に手を加えるべきじゃない。</li>
<li>ネットワークの冗長度は落とさないほうがいい</li>
<li>RAIDはいらない</li>
</ul>


<h2>世界で最も高機能なオープンソース・ハイブリッドクラウド自動化システム「openQRM」で実現するOpenStack/AWS統合管理</h2>

<ul>
<li>セルフサービス化と課金システム</li>
<li>複数クラウド環境での双方向インテグレーション</li>
<li>openQRMがあればvCenterいらない？</li>
<li>KVMの管理も可能</li>
<li>APIもある</li>
</ul>


<p>ここで途中帰宅。。。</p>

<h2>楽しかった</h2>

<ul>
<li>これからopenstackやろうと思えた。</li>
<li>GlusterFSでいいじゃん派だったけど、swiftも見てみようと思った。</li>
<li>dockerはやっぱり楽しそう。</li>
<li>お昼美味しかった。</li>
<li>最後まで見たかった。</li>
</ul>

]]></content>
  </entry>
  
</feed>
