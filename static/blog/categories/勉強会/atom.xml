<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 勉強会 | blog.youyo.info]]></title>
  <link href="http://blog.youyo.info/blog/categories/勉強会/atom.xml" rel="self"/>
  <link href="http://blog.youyo.info/"/>
  <updated>2015-07-06T13:15:44+09:00</updated>
  <id>http://blog.youyo.info/</id>
  <author>
    <name><![CDATA[youyo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[#opst19に参加してきた]]></title>
    <link href="http://blog.youyo.info/blog/2014/10/27/opst19/"/>
    <updated>2014-10-27T22:19:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2014/10/27/opst19</id>
    <content type="html"><![CDATA[<p><img src="https://connpass-tokyo.s3.amazonaws.com/thumbs/95/86/9586832edd7d30f44e1b45b309661f92.png" alt="" /></p>

<p>#opst19に参加してきました！<br/>
<a href="http://connpass.com/event/8638/">http://connpass.com/event/8638/</a><br/>
個人的にはかなりレベルの高いおもしろい内容でした！<br/>
ので、メモったものを公開します！</p>

<h2>openstack 2014.2 (juno release)</h2>

<p>資料</p>

<iframe src="http://www.slideshare.net/yosshy/slideshelf" width="615px" height="470px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:none;" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>


<ul>
<li>半年に1回新バージョンリリース</li>
<li>juno

<ul>
<li>正式コンポーネント11個</li>
<li>sahara(hadoop)が追加</li>
</ul>
</li>
<li>HP,redhatがcommit数1位2位。</li>
<li>最近はsaas,paasにシフトしてる</li>
<li>bare metalは次回(kilo)で正式コンポーネントに</li>
<li>junoでL3-HA対応。分散仮想ルータ。</li>
<li>swiftでRAID5,6的な冗長化の準備進んでる</li>
<li>nova

<ul>
<li>ironic-driver入った。(ベアメタル)</li>
<li>スケジューラーからconductorへ。</li>
<li>対応ハイパーバイザ

<ul>
<li>kmv</li>
<li>vcenter(esxiは削除された！)</li>
<li>xen</li>
<li>hiper-v</li>
</ul>
</li>
</ul>
</li>
<li>glance

<ul>
<li>イメージ単位、ユーザー単位のACL対応</li>
<li>バックエンドたくさんある</li>
</ul>
</li>
<li>neutron

<ul>
<li>ovs分散仮想ルーター</li>
<li>L3エージェント強化。HA</li>
<li>A10-LBのドライバー追加</li>
</ul>
</li>
<li>cinder

<ul>
<li>ストレージバックエンドのreplication対応</li>
<li>複数ボリュームの同時スナップショット</li>
</ul>
</li>
<li>keystone</li>
<li>telemetry(ceilometer)

<ul>
<li>性能改善</li>
<li>イベントでmongodbのとき、アラーム用にRDBMS</li>
</ul>
</li>
<li>trove

<ul>
<li>クラスタリング対応

<ul>
<li>mongodb,mysql</li>
</ul>
</li>
<li>postgresql対応</li>
</ul>
</li>
<li>sahara

<ul>
<li>hadoop2.4対応</li>
<li>apache spark</li>
</ul>
</li>
</ul>


<h2>nova RESTAPI</h2>

<h3>nova apiの過去</h3>

<ul>
<li>一貫性がない</li>
<li>リクエストチェック不足

<ul>
<li>エラーがわからない。商用に影響あり。</li>
</ul>
</li>
<li>nova v3 api開発

<ul>
<li>1年かけた</li>
<li>一貫性修正のために後方互換性がなくなった</li>
</ul>
</li>
<li>nova v2.1 apiの提案

<ul>
<li>v3の上にv2のラッパー置いた</li>
<li>メンテナンスコスト削減</li>
<li>否決。。

<ul>
<li>これはv3がベストという前提の案</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>nova apiの現在</h3>

<ul>
<li>別実装のv2.1</li>
<li>json-schema</li>
</ul>


<h3>nova apiの未来</h3>

<ul>
<li>microversioning</li>
<li>json-home</li>
</ul>


<h2>neutron udpate in juno</h2>

<ul>
<li>distributed virtual router(DVR)</li>
<li>L3-HA

<ul>
<li>masterとslaveの仮想ルーターが異なるホストに配置される</li>
</ul>
</li>
<li>ipv6 full support</li>
<li>security group

<ul>
<li>iptablesベース</li>
</ul>
</li>
<li>nova-networkからneutronへのマイグレーション準備

<ul>
<li>neutronがデフォルトになるけど1年以上先にはなる</li>
</ul>
</li>
<li>既存機能のbugfixがあるので使うならjuno</li>
<li>DVR,L3-HAは新機能だからバグあるかも。</li>
<li>icehouseでもクリティカルなものは特にないけど。</li>
</ul>


<h2>楽天でのopenstackの取り組み</h2>

<ul>
<li>なんで入れたか？

<ul>
<li>RESTAPI</li>
<li>インフラ抽象化</li>
<li>OSS使いたい</li>
</ul>
</li>
<li>icehouce使ってる

<ul>
<li>swiftは使ってない。独自ストレージ。</li>
<li>glance=ZFS</li>
<li>auth(keystone)=LDAP</li>
<li>LB=A10</li>
<li>min=20servers</li>
<li>楽天既存のものを組み込んでる。</li>
</ul>
</li>
<li>region3つ、AZ4つ

<ul>
<li>ネットワークの単位がregion</li>
<li>5000VMで1region</li>
</ul>
</li>
<li>centos80%,ubuntu20%(paas)

<ul>
<li>物理2台で438VM動かしてる！！</li>
</ul>
</li>
<li>冗長化コンセプト

<ul>
<li>1process/1server</li>
<li>APInode複数冗長</li>
<li>VMwareHAに頼ってる</li>
</ul>
</li>
<li>customize

<ul>
<li>forkするとその後のメンテが大変</li>
<li>vmwareでopenstack動かすと結構ハマる！</li>
<li>結構ごりごり。。</li>
</ul>
</li>
<li>impression

<ul>
<li>難しい。</li>
<li>他者は参考にならない。(みんな独自実装。。)</li>
<li>VMwareまわりのバグ踏みまくり。。</li>
<li>楽しい。</li>
<li>フルスタック。</li>
<li>ベストプラクティスはない</li>
</ul>
</li>
<li>roadmap

<ul>
<li>hybrid cloud private/public</li>
<li>Autoscaleやりたい。(楽天は手作業！)</li>
<li>LeoFS(ストレージ)をopenstackに。</li>
</ul>
</li>
<li>ボランティア4人で16000VM(たしか)動かしてる！(業務外)</li>
</ul>


<h3>まとめ</h3>

<ul>
<li>すげー楽しかった。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JFT2014でAmazonS3の発表してきた]]></title>
    <link href="http://blog.youyo.info/blog/2014/09/08/jft2014-s3/"/>
    <updated>2014-09-08T01:42:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2014/09/08/jft2014-s3</id>
    <content type="html"><![CDATA[<p>発表資料はこちら。</p>

<iframe src="http://blog.youyo.info//www.slideshare.net/slideshow/embed_code/38766359" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/youyo_/s3-38766359" title="クラウドを支えるS3の基本を学ぼう" target="_blank">クラウドを支えるS3の基本を学ぼう</a> </strong> from <strong><a href="http://www.slideshare.net/youyo_" target="_blank">Naoto Ishizawa</a></strong> </div></p>

<!-- more -->


<h3>とにかく緊張してた</h3>

<p>当日は朝7:30集合で会場準備を始めて、朝飯も食わずに動き回ってお腹もすいてたのに、お弁当がまったく喉を通らない状況。「もし時間が余って変な感じになったらどうしよう」などという不安から、食事を諦めてスライドを1枚足す作業を開始。この時点で発表1時間30分前。</p>

<h3>マサカリの方、お断り！</h3>

<p>お昼休み終わりの一発目で教室は空いていたので、45分前に入室しててちゃんと映るか確認。そのまま開始までぐだぐだする。今までの人生で一番長く感じた45分間だった。</p>

<p><img src="http://cloudfront.youyo.info/2014-09-08-jft2014-s3/no_masakari.png" width="500"></p>

<p>ただ待ってるのもアレなので、「マサカリの方、お断り！ 質問禁止！！」と書いてみたら逆効果だったようで、マサカリの方に絡まれました。</p>

<h3>汗だくで発表した</h3>

<p><img src="http://cloudfront.youyo.info/2014-09-08-jft2014-s3/jft2014-s3-photo.jpg"></p>

<p>自分が思ってたよりも人数が多い。(汗<br/>
　<br/>
25人くらいはいたのかなぁと。始まってから後ろのほうで立ち見し始めた方もいたのでもう少しいたのかもしれない。もともと汗っかきな上に少し教室が暑かった(僕だけ？)ので、汗だくで大変でした。。 ハンカチ片手に水飲みつつ、勝手に休みつつ。。<br/>
　<br/>
早口にならないように、時間を余らせないように。を意識してしゃべった結果、時間オーバーしました。LTならきれいにパイ投げられてましたね。危なかったです。</p>

<h3>結果</h3>

<ul>
<li>すげー楽しかった！</li>
<li>気づいたら発表することになっててこの1ヶ月間ずっと吐きそうだったけど、最終的に楽しかった！</li>
<li>見にくいスライドでごめんなさい。1枚に詰め込みすぎるのは僕の悪い癖。</li>
<li>もう50分とか喋りたくないです。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JTF2014行ってきた]]></title>
    <link href="http://blog.youyo.info/blog/2014/06/22/jtf2014/"/>
    <updated>2014-06-22T16:37:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2014/06/22/jtf2014</id>
    <content type="html"><![CDATA[<p>JTF2014行ってきました。<br/>
朝起きれなかったので途中からの参加で、かつ夜仕事があったので途中で帰ったわけですが、とても貴重なお話が聞けました！<br/>
箇条書きですが自分がメモったことをざっと書きます。</p>

<!-- more -->


<h2>インフラエンジニアのための次世代プロトコル入門</h2>

<p>※ 途中から参加</p>

<p><a class="embedly-card" href="https://speakerdeck.com/nunnun/inhuraenziniafalsetamefalseci-shi-dai-purotokoruru-men-july-techfesta-2014">インフラエンジニアのための次世代プロトコル入門 - July TechFesta 2014</a></p>

<script>!function(a){var b="embedly-platform",c="script";if(!a.getElementById(b)){var d=a.createElement(c);d.id=b,d.src=("https:"===document.location.protocol?"https":"http")+"://cdn.embedly.com/widgets/platform.js";var e=document.getElementsByTagName(c)[0];e.parentNode.insertBefore(d,e)}}(document);</script>


<h3>HTTP/2.0</h3>

<ul>
<li>サーバからpushできる</li>
<li>1つのtcp接続で複数の情報をやりとりできる</li>
</ul>


<h3>QUIC</h3>

<ul>
<li>quick udp internet connections</li>
<li>udp上に多重化して通信</li>
<li>googleが現状のinternetで動くプロトコル実装</li>
<li>TCP/TLSは3RTTセッション確立、再接続は1RTT</li>
<li>1RTTでセッション確立、再接続は0RTT(ダイレクトにでデータ送信)</li>
<li>QUICはやい</li>
<li>packet pacing (流量調整)</li>
<li>multi path</li>
<li>wifi接続から3G接続のように回線が変わっても、セッションid送ることで0RTTで再接続可能</li>
</ul>


<h3>TLS</h3>

<ul>
<li>v1.3策定中</li>
<li>ハンドシェイク簡略化を目指す</li>
<li>0.5RTTでも早く</li>
</ul>


<h3>ipv6</h3>

<ul>
<li>AzureのUSリージョンでipv4アドレス枯渇発生</li>
<li>ipv4-ipv6移行共存技術</li>
<li>新サービスはipv6対応で作ると今度楽できるかも</li>
<li>cloudフレアはipv6対応済み。CDN使うのもあり</li>
</ul>


<h3>ハイパフォーマンスブラウザネットワーキング(本)</h3>

<ul>
<li>素晴らしい</li>
</ul>


<h3>まとめ</h3>

<ul>
<li>いずれ対応するなら事前に準備したほうがいい</li>
<li>HTTP/2.0はデプロイ間近</li>
</ul>


<h2>Dockerのエンタープライズ開発での活用モデル</h2>

<p>資料見つけたらはる。</p>

<h3>dockerとは</h3>

<ul>
<li>google trend 急上昇</li>
<li>軽い。使いやすい</li>
<li>起動が速い。仮想ハードウェア作詞して起動ではなく、ハードウェア、カーネルは共有してるから速い</li>
<li>異なるディストリでもカーネルは共有</li>
<li>物理と同じ速度が出る。virtualboxなどの仮想化は遅い</li>
<li>インストール簡単</li>
<li>Dockerfileで楽々イメージ作成</li>
<li>コマンド一つで起動</li>
<li>後片付けも簡単</li>
<li>Docker registry</li>
<li>どこでも使える。ポータビリティ高い</li>
</ul>


<h3>仕組み</h3>

<h4>AUFS</h4>

<ul>
<li>何層にも重ねられるFS</li>
<li>readonly-FSの上にwritable-FSを重ねて使用</li>
<li>変更のないファイルはベースで共有する</li>
</ul>


<h4>コンテナ仮想化</h4>

<ul>
<li>namespace</li>
<li>cgroups</li>
<li>PID namespace コンテナ側からは他のPIDに見えない干渉できないが、ホストからはコンテナのPIDは別プロセスIDとして見える</li>
<li>Net namespace hostからはvethという仮想NICとして見える</li>
<li>cgroup</li>
<li>プロセスのリソース制御</li>
</ul>


<h3>事例</h3>

<h4>CIに利用</h4>

<ul>
<li>docker + jenkins + gitlab でCI</li>
<li>jenkinsに様々な環境が必要になる</li>
<li>virtualbox等で分けたのでは重い</li>
<li>dockerで準備すれば軽くできる</li>
</ul>


<h4>評価環境</h4>

<ul>
<li>tomcatがまとめて落ちるの困る</li>
<li>とりあえずdockerで分けた</li>
<li>開発者の確認終わるまでコンテナ残す必要がある</li>
<li>削除フラグのjob作成していらなくなってから削除</li>
</ul>


<h4>開発環境</h4>

<ul>
<li>複数バージョンの保守が必要</li>
<li>必要なものを全て入れたイメージ作成して利用</li>
<li>docker registry利用</li>
<li>オーバーヘッド少ないのでいい</li>
<li>環境消すのも楽</li>
</ul>


<h4>複数拠点でのDB利用</h4>

<ul>
<li>海外の複数拠点での同じDB利用</li>
<li>東京-上海間でレジストリーサーバの同期</li>
<li>東京でpush、上海でpull</li>
<li>状況にあったインフラ上で同一環境を作れた</li>
</ul>


<h2>クラウドストレージを自前で構築できる「OpenStack Swift」をPuppetで数百台自動構築して見えた課題と現状のベストプラクティス</h2>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/36156032" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/MotokiKakinuma/july-techfesta2014-f30" title="July techfesta2014 f30" target="_blank">July techfesta2014 f30</a> </strong> from <strong><a href="http://www.slideshare.net/MotokiKakinuma" target="_blank">Motoki Kakinuma</a></strong> </div>

</p>

<h3>openstack swiftとは</h3>

<ul>
<li>世界中でエンプラ用途進む</li>
<li>proxyとstorage</li>
<li>故障に備えて複数のレプリカに書き込む(3カ所 or 2カ所書き込みでOK、1カ所だけだとNG返す)</li>
<li>ディスク故障時には自動復旧</li>
<li>proxyを増やせばスループット上昇</li>
<li>storage増やせば容量増える
データ3倍保存なので帯域、容量全て食う</li>
</ul>


<h4>利用目的</h4>

<ul>
<li>スケールアウトしたい</li>
<li>長期保存したい(非ベンダー依存)</li>
<li>高速、性能重視</li>
</ul>


<p>　</p>

<ul>
<li>readのほうが速い</li>
<li>1ファイルへのアクセス集中に強い</li>
<li>バックアップ</li>
</ul>


<h3>swift数百台自動構築</h3>

<ul>
<li>数百台(6セット)</li>
<li>監視サーバ等も必要</li>
<li>高水準、少人数</li>
</ul>


<h4>つかったもの</h4>

<ul>
<li>kickstart</li>
<li>puppet (理由なし)</li>
<li>subversion</li>
<li>pssh</li>
<li>ipmi</li>
</ul>


<p>　</p>

<ul>
<li>puppet 自動化、誰でも出来るようにわかりやすく書いた</li>
<li>数百台になったとき、puppetマスターが耐えられない可能性</li>
<li>ローカルデプロイ方式でやった</li>
</ul>


<h4>デプロイ手順</h4>

<ol>
<li>ipmiで電源on</li>
<li>kickstart pxeboot</li>
<li>psshでマニュフェスト配布</li>
<li>puppetで一斉に実行</li>
</ol>


<p>　</p>

<ul>
<li>自動試験</li>
<li>tempest(openstackの自動試験ツール)を拡張</li>
<li>+お手製ツールでテスト(serverspecは評価段階だったのでやめ)</li>
<li>tempestでできないこと</li>
<li>tempestはapi試験なのでバックグラウンド処理の試験は出来ない</li>
</ul>


<h4>遭遇したトラブル</h4>

<ul>
<li>検証環境のファイルを本番にデプロイ</li>
<li>別の理由で止めておいたプロセスがpuppetで起動しちゃった</li>
<li>ファイルでデプロイ出来たが、設定が反映されなかった</li>
<li>本番環境へのプロビジョニング運用はもうやめたい！</li>
</ul>


<h3>インフラプロビジョニングベストプラクティス</h3>

<ul>
<li>イミュータブル</li>
<li>blue-green deployment</li>
<li>packer ビルドツール</li>
<li>複数クラウド仮想環境に対応</li>
<li>開発環境と本番環境の差異を吸収できる</li>
<li>クラウド環境の移行も楽</li>
<li>dockerもいい</li>
<li>基本はpackerを使う(dockerfileは使わない)</li>
<li>dockerはあくまでプラットフォーム</li>
<li>dockerはまだ課題あり</li>
<li>DB、ログはどうする？</li>
</ul>


<h4>まとめ</h4>

<ul>
<li>自動構築は出来たけど、運用でトラブった。</li>
<li>本番環境に手を加えるべきじゃない。</li>
<li>ネットワークの冗長度は落とさないほうがいい</li>
<li>RAIDはいらない</li>
</ul>


<h2>世界で最も高機能なオープンソース・ハイブリッドクラウド自動化システム「openQRM」で実現するOpenStack/AWS統合管理</h2>

<ul>
<li>セルフサービス化と課金システム</li>
<li>複数クラウド環境での双方向インテグレーション</li>
<li>openQRMがあればvCenterいらない？</li>
<li>KVMの管理も可能</li>
<li>APIもある</li>
</ul>


<p>ここで途中帰宅。。。</p>

<h2>楽しかった</h2>

<ul>
<li>これからopenstackやろうと思えた。</li>
<li>GlusterFSでいいじゃん派だったけど、swiftも見てみようと思った。</li>
<li>dockerはやっぱり楽しそう。</li>
<li>お昼美味しかった。</li>
<li>最後まで見たかった。</li>
</ul>

]]></content>
  </entry>
  
</feed>
