<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | blog.youyo.info]]></title>
  <link href="http://blog.youyo.info/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://blog.youyo.info/"/>
  <updated>2015-07-06T13:15:44+09:00</updated>
  <id>http://blog.youyo.info/</id>
  <author>
    <name><![CDATA[youyo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redmine構築]]></title>
    <link href="http://blog.youyo.info/blog/2014/06/06/redmine-mysql-nginx/"/>
    <updated>2014-06-06T22:09:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2014/06/06/redmine-mysql-nginx</id>
    <content type="html"><![CDATA[<p>Redmine構築したのでメモ。(いつも忘れてググってるので。。)</p>

<h2>環境</h2>

<ul>
<li>CentOS 6.5</li>
<li>Redmine 2.5.1</li>
<li>Ruby 2.0.0-p481</li>
<li>Nginx 1.6.0</li>
<li>MySQL 5.1.73</li>
</ul>


<p>Apache Passengerは使わず、unicornで起動してproxyとしてnginxを使います。unicornはupstartで起動します。rubyはrbenvでお好きなものを。</p>

<!-- more -->


<h2>MySQL install</h2>

<p>適当に。<br/>
チューニングはスペックに合わせてしっかりやる。</p>

<p>```
yum -y install mysql-server</p>

<p>cat &lt;<EOS > /etc/my.cnf
[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
user=mysql
character-set-server = utf8
skip-character-set-client-handshake
ignore-builtin-innodb
plugin-load=innodb=ha_innodb_plugin.so;innodb_trx=ha_innodb_plugin.so;innodb_locks=ha_innodb_plugin.so;innodb_lock_waits=ha_innodb_plugin.so;innodb_cmp=ha_innodb_plugin.so;innodb_cmp_reset=ha_innodb_plugin.so;innodb_cmpmem=ha_innodb_plugin.so;innodb_cmpmem_reset=ha_innodb_plugin.so
innodb_file_per_table
innodb_flush_method = O_DIRECT
innodb_buffer_pool_size = 512M
innodb_log_file_size = 256M
innodb_data_file_path = ibdata1:64M:autoextend
innodb_autoextend_increment = 64
[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
character-set-server = utf8
EOS</p>

<p>service mysqld start
chkconfig mysqld on
mysql_secure_installation
```</p>

<p>データベース、ユーザーを作成しておく。</p>

<p><code>
create database redmine;
grant all on redmine.* to redmine@"localhost" identified by "password";
flush privileges;
</code></p>

<h2>Ruby install</h2>

<p>ユーザーを追加してrbenvでrubyインストール。<br/>
ホームディレクトリとかお好きにどうぞ。</p>

<p><code>
mkdir -p /var/www/vhost
useradd -d /var/www/vhost/redmine.youyo.info redmine.youyo.info
chmod 755 /var/www/vhost/redmine.youyo.info
su - redmine.youyo.info
git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
exec $SHELL -l
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
exec $SHELL -l
rbenv install 2.0.0-p481
rbenv global 2.0.0-p481
rbenv rehash
gem install bundler
rbenv rehash
</code></p>

<h2>Redmine install</h2>

<p>そのまま<code>redmine.youyo.info</code>ユーザーでredmineをインストールしていきます。</p>

<p>```
cd
wget http://www.redmine.org/releases/redmine-2.5.1.tar.gz
tar xvzf redmine-2.5.1.tar.gz
cd redmine-2.5.1/
bundle install --without development test rmagick postgresql sqlite
cp -a config/database.yml.example config/database.yml</p>

<h2>vim config/database.yml</h2>

<p>production:
  adapter: mysql2
  database: redmine
  host: localhost
  username: redmine
  password: "password"</p>

<h2>  encoding: utf8</h2>

<p>echo "gem 'unicorn'" >> Gemfile
bundle install --without development test rmagick postgresql sqlite
RAILS_ENV=production rake db:migrate
RAILS_ENV=production rake redmine:load_default_data
rake generate_secret_token
```</p>

<p>テストで起動してみる。問題なければctrl＋cで終了しておく。</p>

<p><code>
bundle exec rails s -e production
</code></p>

<p>unicorn設定。</p>

<p>```
cp -a ~/.rbenv/versions/2.0.0-p481/lib/ruby/gems/2.0.0/gems/unicorn-4.8.3/examples/unicorn.conf.rb config/</p>

<h2>vim config/unicorn.conf.rb</h2>

<p>working_directory "/var/www/vhost/redmine.youyo.info/redmine-2.5.1"
listen "/var/www/vhost/redmine.youyo.info/redmine-2.5.1/tmp/sockets/unicorn.sock", :backlog => 64
timeout 60
pid "/var/www/vhost/redmine.youyo.info/redmine-2.5.1/tmp/pids/unicorn.pid"</p>

<p>stderr_path "/var/www/vhost/redmine.youyo.info/redmine-2.5.1/log/unicorn.stderr.log"</p>

<h2>stdout_path "/var/www/vhost/redmine.youyo.info/redmine-2.5.1/log/unicorn.stdout.log"</h2>

<p>```</p>

<p>起動テスト。</p>

<p><code>
bundle exec unicorn_rails -c config/unicorn.conf.rb -E production
</code></p>

<h2>Upstart config</h2>

<p>upstartでredmine起動するようにします。</p>

<p>```</p>

<h2>vim /etc/init/redmine.conf</h2>

<p>description "redmine"
author "youyo"</p>

<p>start on runlevel [2345]
stop on runlevel [016]</p>

<p>exec su - redmine.youyo.info -c "cd /var/www/vhost/redmine.youyo.info/redmine-2.5.1 &amp;&amp; bundle exec unicorn_rails -c config/unicorn.conf.rb -E production"</p>

<h2>respawn</h2>

<p>initctl start redmine
```</p>

<h2>Nginx install</h2>

<p>nginxでproxyする設定します。</p>

<p>```</p>

<h2>vim /etc/yum.repos.d/nginx.repo</h2>

<p>[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0</p>

<h2>enabled=1</h2>

<p>yum install nginx
rm -rf /etc/nginx/conf.d/*</p>

<h2>vim /etc/nginx/nginx.conf</h2>

<p>keepalive_timeout  10;
proxy_redirect off;
proxy_set_header Host                   $host;
proxy_set_header X-Real-IP              $remote_addr;
proxy_set_header X-Forwarded-Host       $host;
proxy_set_header X-Forwarded-Server     $host;
proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto      $scheme;</p>

<h2>server_tokens off;</h2>

<h2>vim /etc/nginx/conf.d/redmine.conf</h2>

<p>server {</p>

<pre><code>    listen 80;
    server_name redmine.youyo.info;
    root /var/www/vhost/redmine.youyo.info/redmine-2.5.1/public;
    location / {
            if (!-f $request_filename) {
                    proxy_pass http://unix:/var/www/vhost/redmine.youyo.info/redmine-2.5.1/tmp/sockets/unicorn.sock;
                    break;
            }
    }
</code></pre>

<h2>}</h2>

<p>nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful</p>

<p>service nginx start
chkconfig nginx on
```</p>

<h2>できあがり！</h2>

<p>これで<code>http://redmine.youyo.info/</code>にアクセスすればredmine使えるはず！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インスタンスを複製してレプリケーション組んだら詰まった]]></title>
    <link href="http://blog.youyo.info/blog/2014/06/02/mysql-replication-copy/"/>
    <updated>2014-06-02T18:28:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2014/06/02/mysql-replication-copy</id>
    <content type="html"><![CDATA[<p>ec2上にmysqlサーバ建てて、AMI作成してそこからインスタンスもう1台あげてレプリケーション組もうとしたら詰まったのでメモ。<br/>
いつも通り設定して<code>start slave;</code>して<code>show slave status\G</code>したらなんかエラー吐いてIOスレッド止まってた。。。</p>

<p>```
mysql> show slave status\G
<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em> 1. row </em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></p>

<pre><code>           Slave_IO_State:
              Master_Host: 10.0.0.110
              Master_User: repl
              Master_Port: 3306
            Connect_Retry: 60
          Master_Log_File: mysql-bin-log.000007
      Read_Master_Log_Pos: 120
           Relay_Log_File: relay-bin-log.000001
            Relay_Log_Pos: 4
    Relay_Master_Log_File: mysql-bin-log.000007
         Slave_IO_Running: No
        Slave_SQL_Running: Yes
          Replicate_Do_DB:
      Replicate_Ignore_DB:
       Replicate_Do_Table:
   Replicate_Ignore_Table:
  Replicate_Wild_Do_Table:
</code></pre>

<p>  Replicate_Wild_Ignore_Table:</p>

<pre><code>               Last_Errno: 0
               Last_Error:
             Skip_Counter: 0
      Exec_Master_Log_Pos: 120
          Relay_Log_Space: 120
          Until_Condition: None
           Until_Log_File:
            Until_Log_Pos: 0
       Master_SSL_Allowed: No
       Master_SSL_CA_File:
       Master_SSL_CA_Path:
          Master_SSL_Cert:
        Master_SSL_Cipher:
           Master_SSL_Key:
    Seconds_Behind_Master: NULL
</code></pre>

<p>Master_SSL_Verify_Server_Cert: No</p>

<pre><code>            Last_IO_Errno: 1593
            Last_IO_Error: Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.
           Last_SQL_Errno: 0
           Last_SQL_Error:
</code></pre>

<p>  Replicate_Ignore_Server_Ids:</p>

<pre><code>         Master_Server_Id: 110
              Master_UUID:
         Master_Info_File: /var/lib/mysql/master.info
                SQL_Delay: 0
      SQL_Remaining_Delay: NULL
  Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it
       Master_Retry_Count: 86400
              Master_Bind:
  Last_IO_Error_Timestamp: 140602 18:26:21
 Last_SQL_Error_Timestamp:
           Master_SSL_Crl:
       Master_SSL_Crlpath:
       Retrieved_Gtid_Set:
        Executed_Gtid_Set:
            Auto_Position: 0
</code></pre>

<p>1 row in set (0.00 sec)
```</p>

<p>これ。<br/>
<code>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.</code></p>

<p>そっこーググるとすぐに見つかる。いんたーねっとって素晴らしいですね！<br/>
<a href="http://yoku0825.blogspot.jp/2012/10/mysqlfailovergtid.html">http://yoku0825.blogspot.jp/2012/10/mysqlfailovergtid.html</a><br/>
　<br/>
<code>/var/lib/mysql/auto.cnf</code>を削除して再起動で完了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chefでmysql-5.6インストールしようとしたら苦労した話]]></title>
    <link href="http://blog.youyo.info/blog/2013/07/11/chef-mysql56/"/>
    <updated>2013-07-11T18:32:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2013/07/11/chef-mysql56</id>
    <content type="html"><![CDATA[<p>最近chefにハマってます。<br/>
いろんなレシピを書いて勉強中です。<br/>
　<br/>
で、mysql-5.6をchefでインストールしようとしたらはまってしまいました。(泥沼に...<br/>
CentOS6標準のmysql-5.1と同じノリでやったら苦労したのでメモ。<br/>
　<br/>
　</p>

<ul>
<li>mysql-5.1のとき</li>
</ul>


<p>こんな感じでレシピ書いてました。</p>

<p>```
%w(mysql-server mysql mysql-devel).each do |pkg|
  package pkg do</p>

<pre><code>action :install
</code></pre>

<p>  end
end</p>

<p>template '/etc/my.cnf' do
  source 'my.cnf.erb'
  owner 'root'
  group 'root'
  mode 644
  notifies :restart, "service[mysqld]", :delayed
end</p>

<p>service 'mysqld' do
  action [:start, :enable]
end</p>

<p>script "Secure_Install" do
  interpreter 'bash'
  user "root"
  only_if "mysql -u root -e 'show databases'"
  code &lt;&lt;-EOL</p>

<pre><code>mysqladmin -u root password "your_password"
mysql -u root -pyour_password -e "DELETE FROM mysql.user WHERE User='';"
mysql -u root -pyour_password -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1');"
mysql -u root -pyour_password -e "DROP DATABASE test;"
mysql -u root -pyour_password -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
mysql -u root -pyour_password -e "FLUSH PRIVILEGES;"
</code></pre>

<p>  EOL
end</p>

<p>```</p>

<!--more-->


<p><code>script "Secure_Install" do</code>の部分は<code>mysql_secure_installation</code>コマンドを叩いたときに流れるクエリを並べただけです。rootのパスワードが空のときのみ実行されます。<br/>
　<br/>
　<br/>
これと同じノリでmysql-5.6のレシピを最初書いたのですがまったくうまくいかない。。。<br/>
　<br/>
　<br/>
　</p>

<h3>(個人的)ハマりポイント</h3>

<ol>
<li>MySQL-serverのrpmファイルのインストールが完了した時点で<code>mysql_install_db</code>が自動実行される。</li>
<li>初期パスワードが設定されている。</li>
<li>そのパスワードの有効期限？が切れている。。。</li>
</ol>


<p>　<br/>
上から順番に。</p>

<h4>MySQL-serverのrpmファイルのインストールが完了した時点で<code>mysql_install_db</code>が自動実行される</h4>

<p>今までは初回起動時だったと思います。なのでmysqlインストール→my.cnf編集→mysql起動でいい感じに<code>ib_logfile0</code>なんかが作成されていました。<br/>
が、rpmでmysql5.6をインストールするとその時点で<code>mysql_install_db</code>が走ります。<br/>
さらに<code>/usr/my.cnf</code>を作成したうえで走ります。(なぜ/etc/my.cnfじゃないんだ！！！<br/>
　<br/>
MySQL-serverをインストールしてからmy.cnf(innodb_log_file_sizeとか)をいじったらうまく起動しないのです。。。
　<br/>
　<br/>
なのでインストール前にmy.cnf置いておけばOKです。<br/>
(詳しくはこちら様をご覧ください。<a href="http://yoku0825.blogspot.jp/2013/01/rpmmycnf.html">http://yoku0825.blogspot.jp/2013/01/rpmmycnf.html</a>)<br/>
　</p>

<h4>初期パスワードが設定されている</h4>

<p>そのまんまです。初期パスワードは空ではなくランダムに設定されています。<br/>
その初期パスワードは<code>/root/.mysql_secret</code>に書かれています。
初回ログイン時にしっかり確認しましょう。
　</p>

<h4>そのパスワードの有効期限？が切れている</h4>

<p><code>password_expired</code>なる項目があり<code>Y</code>ってなってます。<br/>
このままだと下記のようなエラーが出てしまいます。</p>

<p><code>
$ mysql -u root -p -e "show databases"
ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.
</code></p>

<p>よくわかんねーなーと思いながら<code>mysql_secure_installation</code>を読んでたら<code>--connect-expired-password</code>なるオプション見つけました。<br/>
いいのあるじゃない！ これ使います。</p>

<ul>
<li>mysql-5.6のレシピ</li>
</ul>


<p>(個人的)ハマりポイントを解消した結果のレシピがこちらです。</p>

<p>```</p>

<h1>MySQL-client MySQL-shared-compat MySQL-shared-compat MySQL-devel をインストール</h1>

<p>for number in 0..3</p>

<p>  cookbook_file "/usr/local/src/#{node[:mysql56][:rpm][:filename][number]}" do</p>

<pre><code>source node[:mysql56][:rpm][:filename][number]
</code></pre>

<p>  end</p>

<p>  package node[:mysql56][:rpm][:package][number] do</p>

<pre><code>action :install
provider Chef::Provider::Package::Rpm
source "/usr/local/src/#{node[:mysql56][:rpm][:filename][number]}"
</code></pre>

<p>  end</p>

<p>end</p>

<p>link '/etc/my.cnf' do
  to '/usr/my.cnf'
end</p>

<p>template '/etc/my.cnf' do
  source 'my.cnf.erb'
  owner 'root'
  group 'root'
  notifies :restart, "service[mysql]", :delayed
end</p>

<h1>MySQL-server をインストール</h1>

<p>cookbook_file "/usr/local/src/#{node[:mysql56][:rpm][:filename][4]}" do
  source node[:mysql56][:rpm][:filename][4]
end</p>

<p>package node[:mysql56][:rpm][:package][4] do
  action :install
  provider Chef::Provider::Package::Rpm
  source "/usr/local/src/#{node[:mysql56][:rpm][:filename][4]}"
end</p>

<p>directory '/var/run/mysqld' do
  owner 'mysql'
  group 'root'
  mode 0755
  action :create
end</p>

<p>service 'mysql' do
  action [:start, :enable]
end</p>

<p>script "Secure_Install" do
  interpreter 'bash'
  user "root"
  not_if "mysql -u root -pyour_password -e 'show databases'"
  code &lt;&lt;-EOL</p>

<pre><code>export Initial_PW=`head -n 1 /root/.mysql_secret |awk '{print $(NF - 0)}'`
mysql -u root -p${Initial_PW} --connect-expired-password -e "SET PASSWORD FOR root@localhost=PASSWORD('your_password');"
mysql -u root -pyour_password -e "SET PASSWORD FOR root@'127.0.0.1'=PASSWORD('your_password');"
mysql -u root -pyour_password -e "DELETE FROM mysql.user WHERE User='';"
mysql -u root -pyour_password -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1');"
mysql -u root -pyour_password -e "DROP DATABASE test;"
mysql -u root -pyour_password -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';"
mysql -u root -pyour_password -e "FLUSH PRIVILEGES;"
</code></pre>

<p>  EOL
end
```</p>

<p>僕のようなsqlのsもわからないようなへっぽこにしてはよくできたほうです。<br/>
満足(´ω`)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql5.6+php5.4+nginxな環境を作る(インストールのみ)]]></title>
    <link href="http://blog.youyo.info/blog/2013/02/12/server-build-log/"/>
    <updated>2013-02-12T20:16:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2013/02/12/server-build-log</id>
    <content type="html"><![CDATA[<p>今までVPS2Gプランを借りていたのですが、ちょっとした家計の事情でより安い1Gプランに移ることにしました。んで。せっかくなのでmysql5.6な環境作りたいな〜っと思いまして、ついでにphpも5.4にして毎回忘れるVDAパッチ済みのpostfixもつくっとこうってことでやりました。<br/>
以下いつも通りやったことです。今回はインストール作業のみで設定ファイル編集とかは基本的にやってないです。</p>

<h2>環境とインストールしたもの</h2>

<ul>
<li>CentOS 6.3 x86_64</li>
<li><a href="#N1">Minimal Install &amp; ユーザ追加</a></li>
<li><a href="#N2">初期設定</a></li>
<li><a href="#N3">rbenv install</a></li>
<li><a href="#N4">dnsmasq2.48 install</a></li>
<li><a href="#N5">mysql5.6 install</a></li>
<li><a href="#N6">php5.4 install</a></li>
<li><a href="#N7">nginx1.2.6 install</a></li>
<li><a href="#N8">postfix2.9.5+VDAパッチ install</a></li>
<li><a href="#N9">dovecot2.0.9 install</a></li>
</ul>


<!--more-->




<br>


<br>


<h3><a id="N1">Minimal Install &amp; ユーザ追加</a></h3>

<p>普通にOSインストールしてユーザ追加です。</p>

<p>```</p>

<h1>useradd xxxx</h1>

<h1>su - xxxx</h1>

<p>$ ssh-keygen -t rsa
$ cat .ssh/id_rsa.pub > .ssh/authorized_keys
$ chmod 400 .ssh/authorized_keys</p>

<h1>sed -ie "s/#PermitRootLogin yes/PermitRootLogin no/" /etc/ssh/sshd_config</h1>

<h1>echo -e "AllowUsers\txxxx" >> /etc/ssh/sshd_config</h1>

<h1>/etc/init.d/sshd restart</h1>

<h2>```</h2>

<br>


<br>


<h3><a id="N2">初期設定</a></h3>

<p>とりあえずこまごま設定です。iptablesとかselinuxとかoffってるけど構築途中ということで勘弁！</p>

<p>```</p>

<h1>yum groupinstall "Base"</h1>

<h1>yum update</h1>

<h1>yum install sudo git</h1>

<h1>echo "xxxx ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/xxxx</h1>

<h1>chmod 400 /etc/sudoers.d/xxxx</h1>

<h1>sed -ie "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config</h1>

<h1>chkconfig iptables off</h1>

<h1>chkconfig ip6tables off</h1>

<h1>chkconfig cpuspeed off</h1>

<h1>echo "NETWORKING_IPV6=no" >> /etc/sysconfig/network</h1>

<h1>echo "options ipv6 disable=1" > /etc/modprobe.d/disable-ipv6.conf</h1>

<h1>sed -ie 's/NM_CONTROLLED="yes"/NM_CONTROLLED="no"/' /etc/sysconfig/network-scripts/ifcfg-eth0</h1>

<h1>echo -e "nameserver 210.157.1.171\nnameserver 8.8.8.8" > /etc/resolv.conf</h1>

<h1>sed -ie "s/server 0.centos.pool.ntp.org/server ntp.nict.jp/" /etc/ntp.conf</h1>

<h1>sed -ie "s/server 1.centos.pool.ntp.org/server ntp1.jst.mfeed.ad.jp/" /etc/ntp.conf</h1>

<h1>sed -ie "s/server 2.centos.pool.ntp.org/server ntp2.jst.mfeed.ad.jp/" /etc/ntp.conf</h1>

<h1>chkconfig ntpd on</h1>

<h1>chkconfig ntpdate on</h1>

<h1>su - xxxx</h1>

<p>$ vim .vimrc</p>

<h1>reboot</h1>

<p>```</p>

<p>``` sh .vimrc
syntax on
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,ucs-2,cp932,sjis
set tabstop=2
set autoindent
set expandtab
set shiftwidth=2
set ignorecase
set showmatch
set showmode
set title
highlight JpSpace cterm=underline ctermfg=darkblue guifg=darkblue
match JpSpace /　/</p>

<h2>```</h2>

<br>


<br>


<p>ここからは項目通りにインストールしていくだけです。</p>

<h3><a id="N3">rbenv install</a></h3>

<p>自分の記事まんま(´ω`)<br/>
<a href="http://blog.youyo.info/blog/2013/01/21/rbenv-all-users/">http://blog.youyo.info/blog/2013/01/21/rbenv-all-users/</a></p>

<p>``` sh</p>

<h1>cd /usr/local/src/</h1>

<h1>wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</h1>

<h1>rpm -ivh epel-release-6-8.noarch.rpm</h1>

<h1>sed -ie "s/enabled=1/enabled=0/" /etc/yum.repos.d/epel.repo</h1>

<h1>cd /usr/local/</h1>

<h1>git clone git://github.com/sstephenson/rbenv.git rbenv</h1>

<h1>mkdir rbenv/{shims,versions}</h1>

<h1>git clone git://github.com/sstephenson/ruby-build.git ruby-build</h1>

<h1>cd ruby-build/</h1>

<h1>./install.sh</h1>

<h1>echo 'export RBENV_ROOT="/usr/local/rbenv"' > /etc/profile.d/rbenv.sh</h1>

<h1>echo 'export PATH="/usr/local/rbenv/bin:$PATH"' >> /etc/profile.d/rbenv.sh</h1>

<h1>echo 'eval "$(rbenv init -)"' >> /etc/profile.d/rbenv.sh</h1>

<h1>. /etc/profile.d/rbenv.sh</h1>

<h1>yum install make gcc kernel-devel zlib-devel openssl-devel readline-devel curl-devel sqlite-devel libyaml-devel --enablerepo=epel</h1>

<h1>rbenv install 1.9.3-p385</h1>

<h1>rbenv global 1.9.3-p385</h1>

<h1>rbenv rehash</h1>

<h1>gem install bundler</h1>

<h2>```</h2>

<br>


<br>


<h3><a id="N4">dnsmasq2.48 install</a></h3>

<p>自分の記事まんま2(´ω`)<br/>
<a href="http://blog.youyo.info/blog/2013/01/24/dnsmasq/">http://blog.youyo.info/blog/2013/01/24/dnsmasq/</a></p>

<p><code>
sudo yum install dnsmasq
sudo vim /etc/resolv.conf
sudo /etc/init.d/dnsmasq start
sudo chkconfig dnsmasq on
</code></p>

<p>``` sh resolv.conf
nameserver 127.0.0.1
nameserver 210.157.1.171
nameserver 8.8.8.8</p>

<h2>```</h2>

<br>


<br>


<h3><a id="N5">mysql5.6 install</a></h3>

<p>こちらのサイト様を参考に(´ω`)<br/>
<a href="http://d.hatena.ne.jp/akishin999/20130207/1360241401">http://d.hatena.ne.jp/akishin999/20130207/1360241401</a></p>

<p><code>sh
sudo mkdir /usr/local/src/mysql5.6/
cd /usr/local/src/mysql5.6/
sudo wget http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-shared-5.6.10-1.el6.x86_64.rpm/from/http://cdn.mysql.com/
sudo wget http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-shared-compat-5.6.10-1.el6.x86_64.rpm/from/http://cdn.mysql.com/
sudo wget http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-server-5.6.10-1.el6.x86_64.rpm/from/http://cdn.mysql.com/
sudo wget http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-client-5.6.10-1.el6.x86_64.rpm/from/http://cdn.mysql.com/
sudo wget http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-devel-5.6.10-1.el6.x86_64.rpm/from/http://cdn.mysql.com/
sudo yum localinstall MySQL-*
sudo /etc/init.d/mysql start
mysql -u root -p
mysql&gt; SET PASSWORD FOR root@localhost=PASSWORD('password');
sudo mysql_secure_installation
sudo ln -s /usr/my.cnf /etc/
sudo vim /etc/my.cnf
sudo mkdir /var/run/mysqld
sudo chown mysql /var/run/mysqld/
sudo mkdir /var/log/mysqld
sudo chown mysql:mysql /var/log/mysqld
sudo /etc/init.d/mysql restart
</code></p>

<p>``` sh my.cnf
[mysqld]
datadir                 = /var/lib/mysql
socket                  = /var/lib/mysql/mysql.sock
pid-file                = /var/run/mysqld/mysqld.pid
character-set-server    = utf8
skip-character-set-client-handshake</p>

<p>log-error               = /var/log/mysqld/mysqld-error.log
general_log             = 1
general_log_file        = /var/log/mysqld/mysql.log
slow_query_log          = 1
slow_query_log_file     = /var/log/mysqld/slow.log</p>

<p>log-bin                 = mysql-bin
binlog_format           = mixed
expire_logs_days        = 30
server-id               = 1</p>

<p>innodb_file_per_table
innodb_flush_log_at_trx_commit = 0
innodb_flush_method     = O_DIRECT
innodb_buffer_pool_size = 256M
innodb_log_file_size    = 128M
innodb_log_buffer_size  = 8M</p>

<p>query_cache_type        = 1
query_cache_size        = 64M
key_buffer_size         = 32M
sort_buffer_size        = 1M
read_buffer_size        = 1M
read_rnd_buffer_size    = 4M</p>

<p>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</p>

<p>[mysqld_safe]
log-error               = /var/log/mysqld/mysqld_safe-error.log
pid-file                = /var/run/mysqld/mysqld.pid
character-set-server    = utf8</p>

<h2>```</h2>

<br>


<br>


<h3><a id="N6">php5.4 install</a></h3>

<p>php54.specファイルを少しいじっています(´ω`)</p>

<p>``` sh
sudo yum groupinstall "Development tools"
sudo yum install bzip2-devel db4-devel gmp-devel httpd-devel pam-devel libedit-devel libtool-ltdl-devel libc-client-devel cyrus-sasl-devel openldap-devel postgresql-devel unixODBC-devel libxml2-devel firebird-devel net-snmp-devel libxslt-devel libjpeg-devel libpng-devel freetype-devel libXpm-devel t1lib-devel libmcrypt-devel libtidy-devel libtidy-devel freetds-devel aspell-devel recode-devel libicu-devel enchant-devel --enablerepo=epel
sudo useradd rpmdevel
su - root
su - rpmdevel
mkdir -p ~/rpm/{BUILD,SRPMS,SPECS,SOURCES,RPMS}
echo "%_topdir $HOME/rpm" > $HOME/.rpmmacros
mkdir src
cd src/
wget http://rpms.famillecollet.com/SRPMS/php-5.4.11-1.remi.src.rpm
rpm -ivh php-5.4.11-1.remi.src.rpm
cd ../rpm/SPECS/
sed -ie "s/mysql-devel/MySQL-devel/" php54.spec</p>

<h2>vim php54.spec</h2>

<h1>%global mysql_config %{_libdir}/mysql/mysql_config</h1>

<h2>%global mysql_config /usr/bin/mysql_config</h2>

<p>rpmbuild -v -ba --clean php54.spec
logout
cd /home/rpmdevel/rpm/RPMS/x86_64/
yum localinstall php-5.4.11-1.el6.x86_64.rpm php-cli-5.4.11-1.el6.x86_64.rpm php-common-5.4.11-1.el6.x86_64.rpm php-devel-5.4.11-1.el6.x86_64.rpm php-fpm-5.4.11-1.el6.x86_64.rpm php-gd-5.4.11-1.el6.x86_64.rpm php-mbstring-5.4.11-1.el6.x86_64.rpm php-mcrypt-5.4.11-1.el6.x86_64.rpm php-mysql-5.4.11-1.el6.x86_64.rpm php-pdo-5.4.11-1.el6.x86_64.rpm php-snmp-5.4.11-1.el6.x86_64.rpm php-xml-5.4.11-1.el6.x86_64.rpm php-xmlrpc-5.4.11-1.el6.x86_64.rpm</p>

<h2>```</h2>

<br>


<br>


<h3><a id="N7">nginx1.2.6 install</a></h3>

<p>適当にインストール(´ω`)</p>

<p><code>
sudo vim /etc/yum.repos.d/nginx.repo
sudo yum install nginx --enablerepo=nginx
</code></p>

<p>``` sh nginx.repo
[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/rhel/$releasever/$basearch/
gpgcheck=0
enabled=0</p>

<h2>```</h2>

<br>


<br>


<h3><a id="N8">postfix2.9.5+VDAパッチ install</a></h3>

<p>VDAパッチ当てるのとmysql対応させるためにspecファイルいじってます(´ω`)</p>

<p>``` sh
sudo yum install pcre-devel
su - rpmdevel
cd src/
wget http://download.imt-systems.com/postfix/2.9.5/x86_64/postfix-2.9.5-1.el6.src.rpm
wget http://vda.sourceforge.net/VDA/postfix-vda-v11-2.9.5.patch
rpm -ivh postfix-2.9.5-1.el6.src.rpm
mv postfix-vda-v11-2.9.5.patch ../rpm/SOURCES/
cd ../rpm/SPECS/
sed -ie "s/%bcond_without mysql/%bcond_with mysql/" postfix.spec
sed -ie "s/mysql-devel/MySQL-devel/" postfix.spec</p>

<h2>vim postfix.spec</h2>

<p>Release: 1_VDA_%{?dist}
Epoch: 3
Patch12: postfix-vda-v11-2.9.5.patch</p>

<h2>%patch12 -p1 -b .VDA</h2>

<p>rpmbuild -v -ba --clean postfix.spec
logout
cd /home/rpmdevel/rpm/RPMS/x86_64/
yum localinstall postfix-2.9.5-1_VDA_.el6.x86_64.rpm</p>

<h2>```</h2>

<br>


<br>


<h3><a id="N9">dovecot2.0.9 install</a></h3>

<p>適当にインス(ry</p>

<p>``` sh
sudo yum install dovecot dovecot-mysql</p>

<h2>```</h2>

<br>


<br>


<ul>
<li>インストールだけしました。</li>
<li>ちゃんとした設定はあとで。</li>
<li><s>作成したrpmはなくさないようにあとで公開予定(未定)</s></li>
</ul>


<p>置きました！<br/>
<a href="http://download.youyo.info/Linux/centos/6/x86_64/RPM/">http://download.youyo.info/Linux/centos/6/x86_64/RPM/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS上にzabbix-server構築してみた (Nginx + php-fpm)]]></title>
    <link href="http://blog.youyo.info/blog/2013/01/29/zabbix-on-aws/"/>
    <updated>2013-01-29T10:32:00+09:00</updated>
    <id>http://blog.youyo.info/blog/2013/01/29/zabbix-on-aws</id>
    <content type="html"><![CDATA[<p>Nginx + php-fpmの勉強をしたくて構築してみました。<br/>
最終的にはそれ以外のことに費やした時間のほうが長くなりましたが...<br/>
メモ書きなのでつらつらと書いていきます。<br/>
　<br/>
※かなりの長文になってしまいました...</p>

<h2>環境</h2>

<ul>
<li>Amazon Linux (3.2.34-55.46.amzn1.x86_64)</li>
<li>zabbix 2.0.4</li>
<li>mysql 5.5.27</li>
<li>nginx 1.2.6</li>
<li>php 5.3.20</li>
</ul>


<h2>やったこと</h2>

<ol>
<li>RDSセットアップ</li>
<li>zabbix-2.0のrpm作成</li>
<li>zabbix インストール</li>
<li>Nginx + php-fpm インストール</li>
<li><s>SESでアラートメール送信設定</s> ←力尽きました... あとでやります。</li>
</ol>


<p>※ <a href="http://blog.youyo.info/blog/2013/01/29/zabbix-on-aws/">続き</a>書きました！</p>

<!--more-->


<h2>RDSセットアップ</h2>

<p>ec2にmysql入れてもいいのですが、せっかくなのでRDS使用してみます。</p>

<ul>
<li>AWS Management ConsoleからDB Parameter Group 作成</li>
</ul>


<p><img src="http://cloudfront.youyo.info/2013-01-29-zabbix-on-aws/create_rds_prm2.png" alt="create_rds_prm" /></p>

<ul>
<li>文字コードをutf-8に修正。CLIでズババッと。<a href="http://d.hatena.ne.jp/deeeki/20110606/rds_modify_db_parameter_group">こちら</a>を参考に。</li>
</ul>


<p><code>
mkdir aws
cd aws/
wget http://s3.amazonaws.com/rds-downloads/RDSCli.zip
unzip RDSCli.zip
cd RDSCli-1.12.001/
echo "AWSAccessKeyId=********" &gt; credential-file-path.txt
echo "AWSSecretKey=********" &gt;&gt; credential-file-path.txt
echo "export AWS_RDS_HOME=/home/ec2-user/aws/RDSCli-1.12.001" &gt;&gt; ~/.bashrc
echo "export PATH=/home/ec2-user/aws/RDSCli-1.12.001/bin:$PATH" &gt;&gt; ~/.bashrc
echo "export EC2_REGION=ap-northeast-1" &gt;&gt; ~/.bashrc
echo "export AWS_CREDENTIAL_FILE=/home/ec2-user/aws/RDSCli-1.12.001/credential-file-path.txt" &gt;&gt; ~/.bashrc
source ~/.bashrc
rds-describe-db-parameter-groups
rds-modify-db-parameter-group zabbix20 -p "name=character_set_client, value=utf8, method=immediate"
rds-modify-db-parameter-group zabbix20 -p "name=character_set_connection, value=utf8, method=immediate"
rds-modify-db-parameter-group zabbix20 -p "name=character_set_database, value=utf8, method=immediate"
rds-modify-db-parameter-group zabbix20 -p "name=character_set_results, value=utf8, method=immediate"
rds-modify-db-parameter-group zabbix20 -p "name=character_set_server, value=utf8, method=immediate"
</code></p>

<ul>
<li>DBインスタンス作成して接続確認</li>
</ul>


<p>こんな感じで適当に作成。</p>

<p><img src="http://cloudfront.youyo.info/2013-01-29-zabbix-on-aws/create_db-instance2.png" alt="create_db-instance" /></p>

<p>接続して文字コードチェック。</p>

<p><code>
sudo yum install mysql
mysql -u USER -h ********.ap-northeast-1.rds.amazonaws.com -p DATABASE
Enter password:
ERROR 2003 (HY000): Can't connect to MySQL server on '********.ap-northeast-1.rds.amazonaws.com' (110)
</code></p>

<p>DB Security Groupsの設定が抜けていました。。。<br/>
設定して再チャレンジ！</p>

<p><code>
mysql -u USER -h ********.ap-northeast-1.rds.amazonaws.com -p DATABASE
mysql&gt; SHOW VARIABLES LIKE 'character_set%';
+--------------------------+-------------------------------------------+
| Variable_name            | Value                                     |
+--------------------------+-------------------------------------------+
| character_set_client     | utf8                                      |
| character_set_connection | utf8                                      |
| character_set_database   | latin1                                    |
| character_set_filesystem | binary                                    |
| character_set_results    | utf8                                      |
| character_set_server     | utf8                                      |
| character_set_system     | utf8                                      |
| character_sets_dir       | /rdsdbbin/mysql-5.5.27.R1/share/charsets/ |
+--------------------------+-------------------------------------------+
</code></p>

<p>えぇ〜！(ﾉω＜；)<br/>
databaseどうした...<br/>
設定抜けた？ 再設定してもう１回...</p>

<p><code>
rds-modify-db-parameter-group zabbix20 -p "name=character_set_database, value=utf8, method=immediate"
mysql&gt; SHOW VARIABLES LIKE 'character_set%';
+--------------------------+-------------------------------------------+
| Variable_name            | Value                                     |
+--------------------------+-------------------------------------------+
| character_set_client     | utf8                                      |
| character_set_connection | utf8                                      |
| character_set_database   | latin1                                    |
| character_set_filesystem | binary                                    |
| character_set_results    | utf8                                      |
| character_set_server     | utf8                                      |
| character_set_system     | utf8                                      |
| character_sets_dir       | /rdsdbbin/mysql-5.5.27.R1/share/charsets/ |
+--------------------------+-------------------------------------------+
</code></p>

<p>ぐぬぬ。。。 とりあえずrebootしてみる。<br/>
→ダメでした。。。<br/>
→<a href="http://www.teps4545.com/2010/01/amazon-rds.html">こちら</a>のサイト様を参考に解決しました！</p>

<p><code>
mysql&gt; alter database DATABASE default character set utf8;
mysql&gt; SHOW VARIABLES LIKE 'character_set%';
+--------------------------+-------------------------------------------+
| Variable_name            | Value                                     |
+--------------------------+-------------------------------------------+
| character_set_client     | utf8                                      |
| character_set_connection | utf8                                      |
| character_set_database   | utf8                                      |
| character_set_filesystem | binary                                    |
| character_set_results    | utf8                                      |
| character_set_server     | utf8                                      |
| character_set_system     | utf8                                      |
| character_sets_dir       | /rdsdbbin/mysql-5.5.27.R1/share/charsets/ |
+--------------------------+-------------------------------------------+
</code></p>

<h2>zabbix-2.0のrpm作成</h2>

<p>zabbix-2.0のrpm作成します。<br/>
参考サイト様は<a href="http://d.hatena.ne.jp/zabbio/20120606/1338941328">こちら</a>。</p>

<ul>
<li>必要なパッケージ類のインストール</li>
</ul>


<p><code>
git clone https://github.com/atanaka7/zabbix-jp-amzn1.git
sudo yum update
sudo yum groupinstall 'Development tools'
sudo yum install mysql-devel net-snmp-devel openldap-devel sqlite-devel unixODBC-devel libssh2-devel java-devel curl-devel OpenIPMI-devel mysql postgresql-devel
sudo rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
sudo sed -ie "s/\$releasever/6/g" /etc/yum.repos.d/remi.repo
sudo yum install php-cli php-mbstring php-common php-mysql php-xml php php-pdo php-gd php-bcmath --enablerepo=remi
cd /usr/local/src/
sudo wget http://www.zabbix.jp/binaries/relatedpkgs/rhel6/x86_64/fping-2.4b2-16.el6.JP.x86_64.rpm
sudo wget http://www.zabbix.jp/binaries/relatedpkgs/rhel6/x86_64/iksemel-1.4-2.el6.JP.x86_64.rpm
sudo wget http://www.zabbix.jp/binaries/relatedpkgs/rhel6/x86_64/iksemel-devel-1.4-2.el6.JP.x86_64.rpm
sudo yum localinstall fping-2.4b2-16.el6.JP.x86_64.rpm iksemel-1.4-2.el6.JP.x86_64.rpm iksemel-devel-1.4-2.el6.JP.x86_64.rpm
</code></p>

<ul>
<li>rpmbuild</li>
</ul>


<p><code>
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
echo "%_topdir $HOME/rpmbuild" &gt; ~/.rpmmacros
echo "%_builddir %{_topdir}/BUILD" &gt;&gt; ~/.rpmmacros
echo "%_rpmdir %{_topdir}/RPMS" &gt;&gt; ~/.rpmmacros
echo "%_sourcedir %{_topdir}/SOURCES" &gt;&gt; ~/.rpmmacros
echo "%_specdir %{_topdir}/SPECS" &gt;&gt; ~/.rpmmacros
echo "%_srcrpmdir %{_topdir}/SRPMS" &gt;&gt; ~/.rpmmacros
rpmbuild --rebuild zabbix-2.0.4-1.amzn1.src.rpm
</code></p>

<h2>zabbix インストール</h2>

<ul>
<li>rpm インストール</li>
</ul>


<p><code>
cd ~/rpmbuild/RPMS/x86_64/
sudo yum localinstall zabbix-2.0.4-1.amzn1.x86_64.rpm zabbix-server-2.0.4-1.amzn1.x86_64.rpm \
zabbix-server-mysql-2.0.4-1.amzn1.x86_64.rpm zabbix-web-mysql-2.0.4-1.amzn1.x86_64.rpm \
zabbix-agent-2.0.4-1.amzn1.x86_64.rpm ../noarch/zabbix-web-2.0.4-1.amzn1.noarch.rpm
</code></p>

<ul>
<li>データベース設定</li>
</ul>


<p><code>
cd /usr/share/doc/zabbix-server-2.0.4/database/mysql/
sudo cat schema.sql |mysql -u USER -h ********.ap-northeast-1.rds.amazonaws.com -p DATABASE
sudo cat images.sql |mysql -u USER -h ********.ap-northeast-1.rds.amazonaws.com -p DATABASE
sudo cat data.sql |mysql -u USER -h ********.ap-northeast-1.rds.amazonaws.com -p DATABASE
</code></p>

<ul>
<li>Zabbix-Server設定</li>
</ul>


<p><code>/etc/zabbix/zabbix_server.conf</code>の修正点のみつらつらと...</p>

<p><code>
DBHost=********.ap-northeast-1.rds.amazonaws.com
DBName=MYSQL_DB
DBUser=MYSQL_USER
DBPassword=MYSQL_PW
</code></p>

<ul>
<li>Zabbix-Server起動</li>
</ul>


<p>エラーなければok.</p>

<p><code>
sudo /etc/init.d/zabbix-server start
</code></p>

<h2>Nginx + php-fpm インストール</h2>

<ul>
<li>インストール手順</li>
</ul>


<p><code>
sudo yum install nginx php php-fpm php-devel php-cli php-xml php-mysql php-mbstring php-gd --enablerepo=remi
cd /etc/nginx/
sudo vim /etc/php.ini
sudo vim /etc/php-fpm.d/php_zabbix.conf
sudo vim nginx.conf
sudo vim conf.d/nginx_zabbix.conf
sudo mkdir /var/log/nginx/zabbix/
sudo mkdir /var/www/nginx
sudo ln -s /usr/share/zabbix /var/www/nginx/zabbix
sudo /etc/init.d/php-fpm start
sudo nginx -t
sudo /etc/init.d/nginx start
</code></p>

<ul>
<li>各種設定ファイル</li>
</ul>


<p><div><script src='https://gist.github.com/4662274.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/4662301.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/4662318.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/4662327.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<ul>
<li>Nginx,php-fpm起動</li>
</ul>


<p>起動時にエラーがなく、http://domain/zabbixにアクセスしてこんな画面が出ればok. あとは画面の指示に従ってインストール！<br/>
何かおかしいときは画面上部に赤字でエラー内容が出るのでそれを参考に修正。</p>

<p><code>
sudo /etc/init.d/php-fpm start
sudo /etc/init.d/nginx start
sudo chown nginx:nginx /etc/zabbix/zabbix.conf.php
</code></p>

<p><img src="http://cloudfront.youyo.info/2013-01-29-zabbix-on-aws/zabbix_web.png" alt="zabbix_web" /></p>

<h2>とりあえず完成！</h2>

<ul>
<li>完全に複数の記事に分けるべきでした。</li>
<li>構築しながらブログ書いて疲れました。</li>
<li>SESでアラートメール送信は後日やります。。。</li>
</ul>


<p>※ <a href="http://blog.youyo.info/blog/2013/01/29/zabbix-on-aws/">続き</a>はこちら！</p>

<p><img src="http://cloudfront.youyo.info/2013-01-29-zabbix-on-aws/zabbix_web2.png" alt="zabbix_web2" /></p>
]]></content>
  </entry>
  
</feed>
